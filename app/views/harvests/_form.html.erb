<div class='container-fluid background-harvest-form'>
  <div class='row'>
    <div class='harvest-form-container col-xs-12 box-shadow-1 spawn-monitor-fill'>
      <div class='harvest-form col-xs-12'>
          <%= form_for(@harvest) do |f| %>
            <%= render 'shared/flash_messages' unless flash.empty? %>
            <div class='heading-container'>
              <div class='heading'>
                <% if params[:action] == 'edit' %>
                  EDIT HARVEST
                  <% else %>
                  NEW HARVEST
                <% end %>
              </div>
            </div>
              <div class="section">
                <div class="tech-label"><h2 id='game-type'>Game Type</h2></div>
                <div class="selectables">
                  <label>
                    <input type="radio" value="turkey" name="harvest[animal_type]"
                      class='animal-selector' id="harvest_animal_type_turkey" />
                    <img src="https://d2m6u6shu0evoe.cloudfront.net/images/turkey.png">
                  </label>
                  <label>
                    <input type="radio" value="deer" name="harvest[animal_type]"
                      class='animal-selector' id="harvest_animal_type_deer" />
                    <img src="https://d2m6u6shu0evoe.cloudfront.net/images/deer.png">
                  </label>
                  <label>
                    <input type="radio" value="moose" name="harvest[animal_type]"
                      class='animal-selector' id="harvest_animal_type_moose" />
                    <img src="https://d2m6u6shu0evoe.cloudfront.net/images/moose.png">
                  </label>
                  <label>
                    <input type="radio" value="bear" name="harvest[animal_type]"
                      class='animal-selector' id="harvest_animal_type_bear" />
                    <img src="https://d2m6u6shu0evoe.cloudfront.net/images/bear.png">
                  </label>
                  <label>
                    <input type="radio" value="bovid" name="harvest[animal_type]"
                      class='animal-selector' id="harvest_animal_type_bovid" />
                    <img src="https://d2m6u6shu0evoe.cloudfront.net/images/bovid.png">
                  </label>
                  <label>
                    <input type="radio" value="canine" name="harvest[animal_type]"
                      class='animal-selector' id="harvest_animal_type_canine" />
                    <img src="https://d2m6u6shu0evoe.cloudfront.net/images/canine_white.png">
                  </label>
                  <label>
                    <input type="radio" value="water_fowl" name="harvest[animal_type]"
                      class='animal-selector' id="harvest_animal_type_water_fowl" />
                    <img src="https://d2m6u6shu0evoe.cloudfront.net/images/water_fowl_white.png">
                  </label>
                  <label>
                    <input type="radio" value="miscellaneous" name="harvest[animal_type]"
                      class='animal-selector' id="harvest_animal_type_miscellaneous" />
                    <img src="https://d2m6u6shu0evoe.cloudfront.net/images/miscellaneous_white.png">
                  </label>
                </div>
              </div>
              <div class="section">
                <div class="tech-label"><h2 id='weapon-type'>Weapon Type</h2></div>
                <div class="selectables">
                  <label>
                    <input type="radio" value="rifle" name="harvest[weapon_type]"
                      class='weapon-selector' id="harvest_weapon_type_rifle"/>
                    <img src="https://d2m6u6shu0evoe.cloudfront.net/images/rifle.png">
                  </label>
                  <label>
                    <input type="radio" value="shotgun" name="harvest[weapon_type]"
                      class='weapon-selector' id="harvest_weapon_type_shotgun" />
                    <img src="https://d2m6u6shu0evoe.cloudfront.net/images/shotgun.png">
                  </label>
                  <label>
                    <input type="radio" value="pistol" name="harvest[weapon_type]"
                      class='weapon-selector' id="harvest_weapon_type_pistol" />
                    <img src="https://d2m6u6shu0evoe.cloudfront.net/images/pistol.png">
                  </label>
                  <label>
                    <input type="radio" value="bow" name="harvest[weapon_type]"
                      class='weapon-selector' id="harvest_weapon_type_bow" />
                    <img src="https://d2m6u6shu0evoe.cloudfront.net/images/bow.png">
                  </label>
                  <label>
                    <input type="radio" value="trap" name="harvest[weapon_type]"
                      class='weapon-selector' id="harvest_weapon_type_trap" />
                    <img src="https://d2m6u6shu0evoe.cloudfront.net/images/trap.png">
                  </label>
                </div>
              </div>
            <br>
              <div class="col-xs-12 col-md-6 section defined-height" id="harvest_details">
                <div class="tech-label"><h2>Weight (lbs)</h2>
                </div>
                <%= f.label 'Weight', class: "sr-only" %>
                <%= f.text_field :weight, class: 'form-control judes-addition' %>
                <br>
                <div class="tech-label"><h2>Details (optional)</h2>
                </div>
                <%= f.label 'Details (Optional)', class: "sr-only" %>
                <%= f.text_area(:description, rows: 6,
                  class: 'form-control judes-addition', id: 'optional-details' ) %>
                <div class='col-xs-6 modified-margin'>
                  <div class="tech-label tech-label-small"><h2>Image Upload</h2>
                  </div>
                  <%= f.label :image, class: "sr-only" %>
                  <%= f.file_field :image%>
                </div>
                <div class='col-xs-6'>
                  <div class="tech-label tech-label-small"><h2>Date Harvested</h2>
                  </div>
                  <%= f.label :date, class: "sr-only" %>
                  <% if params[:action] == 'edit' && @harvest.date != nil %>
                  <!-- Convert date to readable string with year at end
                    String will be converted back to date in backend -->
                    <% @date = @harvest.date.strftime('%m/%d/%Y') %>
                    <%= f.text_field :date, class: 'form-control judes-addition',
                      :data => {provide: "datepicker"},
                      :value => @date %>
                  <% else %>
                  <%= f.text_field :date, class: 'form-control judes-addition',
                    :data => {provide: "datepicker"},
                    :value => Date.today.strftime('%m/%d/%Y') %>
                  <% end %>
                </div>
                <br>
              </div>
              <div class="col-xs-12 col-md-6 section defined-height">
                <div class="tech-label"><h2>Coordinates</h2></div>
                <div id='new-harvest-map-container'>
                  <div id="new-harvest-map"><i class="fa fa-spinner fa-pulse fa-5x fa-fw"></i></div>
                </div>
                <div id="lat-long-fields">
                 <%= f.number_field :latitude, id: :latitude, step: 'any' %>
                 <%= f.number_field :longitude, id: :longitude, step: 'any' %>
                 </div>
                 <br>
              </div>
              <br>
          <div class='col-lg-6 button-container'>
            <%= button_tag 'SUBMIT', class: 'btn btn-primary',
              data: { disable_with: "<i class='fa fa-refresh fa-spin'>
              </i> Saving Harvest..."} %>
          </div>

        <% end %>

        <script>
        var markers = [];
        var harvest = gon.harvest || false;
        var harvestLat = harvest.latitude || false;
        var harvestLng = harvest.longitude || false;
        var action = gon.action;
        var user_id = gon.user_id;

        var userLat;
        var userLng;
        if (action === 'edit') {
          // will use harvest coords to center map
          userLat = parseFloat(harvestLat);
          userLng = parseFloat(harvestLng);
        } else {
          userLat = <%= current_user.latitude || 44 %>
          userLng = <%= current_user.longitude || -69 %>
        };

        // center map on (harvestLat, harvestLng) if action === 'edit'
        function initialize() {
          var map = new google.maps.Map(document.getElementById('new-harvest-map'), {
            zoom: 9,
            center: {lat: userLat, lng: userLng},
            mapTypeId: 'terrain',
            styles: [
                    {
                      featureType: 'landscape',
                      stylers: [
                        { saturation: -50 }
                      ]
                    },{
                      featureType: 'water',
                      stylers: [
                        { hue: '#174a67' },
                        { saturation: 50 },
                        { lightness: -80 }
                      ]
                    },{
                      featureType: 'road',
                      elementType: 'geometry',
                      stylers: [
                        { hue: '#00ffee' },
                        { saturation: 50 }
                      ]
                    },{
                      featureType: 'poi',
                      elementType: 'labels',
                      stylers: [
                        { visibility: 'off' }
                      ]
                    }
            ]
          });

          // drop marker at user location
          var userLocation = {lat: userLat, lng: userLng};
          addMarker(userLocation, map);

          // on click, replace marker with new location
          google.maps.event.addListener(map, 'click', function(event) {
            addMarker(event.latLng, map);
            map.panTo(event.latLng);
            var latitude = event.latLng.lat().toFixed(6);
        		var longitude = event.latLng.lng().toFixed(6);
            updateCoordinateFields(latitude, longitude);
          });
        } // end initialize

        function addMarker(location, map) {
          for (var i = 0; i < markers.length; i++) {
              markers[i].setMap(null);
          };

          markers = [];
          var marker = new google.maps.Marker({
            position: location,
            draggable: true,
            map: map
          });

          // update marker on drag
          google.maps.event.addListener(marker, 'dragend', function(event) {
            var latitude = event.latLng.lat().toFixed(6);
        		var longitude = event.latLng.lng().toFixed(6);
            updateCoordinateFields(latitude, longitude);
          });

          markers.push(marker);
        };

          function getUserCoordinates() {
            var geoOptions = {
              timeout: 1 * 1000,
              enableHighAccuracy: true
            }
            if (navigator.geolocation) {
              navigator.geolocation.getCurrentPosition(setCoords, handleError, geoOptions);
            } else {
              updateCoordinateFields(userLat, userLng);
              initialize();
            };
          };

          function handleError(error) {
            updateCoordinateFields(userLat, userLng);
            initialize();
          }

          function updateCoordinateFields(lat, lng) {
            lat = parseFloat(lat);
            lng = parseFloat(lng);
            document.getElementById("latitude").value = lat.toFixed(6);
            document.getElementById("longitude").value = lng.toFixed(6);
          };

          function setCoords(position) {
            lat = position.coords.latitude;
            lng = position.coords.longitude;
            updateUserCoords(lat, lng);
          };

          function updateUserCoords(lat, lng) {
            $.ajax({
              type: 'PATCH',
              beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
              url: `/users/${user_id}`,
              data: {'user[latitude]': lat, 'user[longitude]': lng}
            }).done(function() {
              updateCoordinateFields(lat, lng);
            }).always(function() {
              initialize();
            });
          };

          function initMap() {
            if (action === 'new') {
              getUserCoordinates();
            } else {
              updateCoordinateFields(userLat, userLng);
              initialize();
            };
          };

        </script>

        <script async defer
          src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAwtrmNvPxpJU6tbz577Ll--lDxDiDLGVg&callback=initMap">
        </script>

        <script>
          // Auto-updates form labels when buttons are clicked
          $(document).ready(function() {
            $(".animal-selector").on("click", function (event) {
              var type = event.target.id.slice(20).replace('_','');
              type = type.charAt(0).toUpperCase() + type.slice(1);
              $("#game-type").text(type);
            });
            $(".weapon-selector").on("click", function (event) {
              var type = event.target.id.slice(20);
              type = type.charAt(0).toUpperCase() + type.slice(1);
              $("#weapon-type").text(type);
            })
          });
        </script>
      </div>
    </div>
  </row>
</div>
